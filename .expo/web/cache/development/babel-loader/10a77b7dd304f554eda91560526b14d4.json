{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from \"react\";\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { fetchExpenses } from \"../util/http\";\nimport LoadingOverlay from \"../components/UI/LoadingOverlay\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction RecentExpenses() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFetching = _useState2[0],\n      setIsFetching = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var expensesCtx = useContext(ExpensesContext);\n  useEffect(function () {\n    function getExpenses() {\n      var _expenses;\n\n      return _regeneratorRuntime.async(function getExpenses$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsFetching(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetchExpenses());\n\n            case 4:\n              _expenses = _context.sent;\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 9:\n              setIsFetching(false);\n              expensesCtx.setExpenses(expenses);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 7]], Promise);\n    }\n\n    getExpenses();\n  }, []);\n\n  if (isFetching) {\n    return _jsx(LoadingOverlay, {});\n  }\n\n  var recentExpenses = expensesCtx.expenses.filter(function (expense) {\n    var today = new Date();\n    var date7DaysAgo = getDateMinusDays(today, 7);\n    return expense.date >= date7DaysAgo && expense.date <= today;\n  });\n  return _jsx(ExpensesOutput, {\n    expenses: recentExpenses,\n    expensesPeriod: \"Last 7 Days\",\n    fallbackText: \"No expenses registered for the last 7 days.\"\n  });\n}\n\nexport default RecentExpenses;","map":{"version":3,"sources":["D:/ReactNative/10 http/react-native/screens/RecentExpenses.js"],"names":["useContext","useEffect","useState","ExpensesOutput","ExpensesContext","getDateMinusDays","fetchExpenses","LoadingOverlay","RecentExpenses","isFetching","setIsFetching","error","setError","expensesCtx","getExpenses","expenses","setExpenses","recentExpenses","filter","expense","today","Date","date7DaysAgo","date"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA,OAAOC,cAAP;AACA,SAASC,eAAT;AACA,SAASC,gBAAT;AACA,SAASC,aAAT;AACA,OAAOC,cAAP;;;AAEA,SAASC,cAAT,GAA0B;AACxB,kBAAoCN,QAAQ,CAAC,IAAD,CAA5C;AAAA;AAAA,MAAOO,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA0BR,QAAQ,EAAlC;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,WAAW,GAAGb,UAAU,CAACI,eAAD,CAA9B;AAGAH,EAAAA,SAAS,CAAC,YAAM;AACd,aAAea,WAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEJ,cAAAA,aAAa,CAAC,IAAD,CAAb;AADF;AAAA;AAAA,+CAG2BJ,aAAa,EAHxC;;AAAA;AAGUS,cAAAA,SAHV;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAOEL,cAAAA,aAAa,CAAC,KAAD,CAAb;AACAG,cAAAA,WAAW,CAACG,WAAZ,CAAwBD,QAAxB;;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUAD,IAAAA,WAAW;AACZ,GAZQ,EAYN,EAZM,CAAT;;AAaA,MAAIL,UAAJ,EAAgB;AACd,WAAO,KAAC,cAAD,KAAP;AACD;;AACD,MAAMQ,cAAc,GAAGJ,WAAW,CAACE,QAAZ,CAAqBG,MAArB,CAA4B,UAAAC,OAAO,EAAI;AAC5D,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,YAAY,GAAGjB,gBAAgB,CAACe,KAAD,EAAQ,CAAR,CAArC;AAEA,WAAOD,OAAO,CAACI,IAAR,IAAgBD,YAAhB,IAAgCH,OAAO,CAACI,IAAR,IAAgBH,KAAvD;AACD,GALsB,CAAvB;AAOA,SACE,KAAC,cAAD;AACE,IAAA,QAAQ,EAAEH,cADZ;AAEE,IAAA,cAAc,EAAC,aAFjB;AAGE,IAAA,YAAY,EAAC;AAHf,IADF;AAOD;;AAED,eAAeT,cAAf","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\n\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { fetchExpenses } from \"../util/http\";\nimport LoadingOverlay from \"../components/UI/LoadingOverlay\";\n\nfunction RecentExpenses() {\n  const [isFetching, setIsFetching] = useState(true);\n  const [error, setError] = useState();\n  const expensesCtx = useContext(ExpensesContext);\n  // const [fetchedExpenses, setFetchedExpenses] = useState([]);\n\n  useEffect(() => {\n    async function getExpenses() {\n      setIsFetching(true);\n      try {\n        const expenses = await fetchExpenses();\n        // setFetchedExpenses(expenses);\n      } catch (error) {}\n\n      setIsFetching(false);\n      expensesCtx.setExpenses(expenses);\n    }\n    getExpenses();\n  }, []);\n  if (isFetching) {\n    return <LoadingOverlay />;\n  }\n  const recentExpenses = expensesCtx.expenses.filter(expense => {\n    const today = new Date();\n    const date7DaysAgo = getDateMinusDays(today, 7);\n\n    return expense.date >= date7DaysAgo && expense.date <= today;\n  });\n\n  return (\n    <ExpensesOutput\n      expenses={recentExpenses}\n      expensesPeriod=\"Last 7 Days\"\n      fallbackText=\"No expenses registered for the last 7 days.\"\n    />\n  );\n}\n\nexport default RecentExpenses;\n"]},"metadata":{},"sourceType":"module"}