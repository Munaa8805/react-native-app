{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from \"react\";\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { fetchExpenses } from \"../util/http\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction RecentExpenses() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFetching = _useState2[0],\n      setIsFetching = _useState2[1];\n\n  var expensesCtx = useContext(ExpensesContext);\n  useEffect(function () {\n    function getExpenses() {\n      var expenses;\n      return _regeneratorRuntime.async(function getExpenses$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsFetching(true);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetchExpenses());\n\n            case 3:\n              expenses = _context.sent;\n              expensesCtx.setExpenses(expenses);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getExpenses();\n  }, []);\n  var recentExpenses = expensesCtx.expenses.filter(function (expense) {\n    var today = new Date();\n    var date7DaysAgo = getDateMinusDays(today, 7);\n    return expense.date >= date7DaysAgo && expense.date <= today;\n  });\n  return _jsx(ExpensesOutput, {\n    expenses: recentExpenses,\n    expensesPeriod: \"Last 7 Days\",\n    fallbackText: \"No expenses registered for the last 7 days.\"\n  });\n}\n\nexport default RecentExpenses;","map":{"version":3,"sources":["D:/ReactNative/10 http/react-native/screens/RecentExpenses.js"],"names":["useContext","useEffect","useState","ExpensesOutput","ExpensesContext","getDateMinusDays","fetchExpenses","RecentExpenses","isFetching","setIsFetching","expensesCtx","getExpenses","expenses","setExpenses","recentExpenses","filter","expense","today","Date","date7DaysAgo","date"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA,OAAOC,cAAP;AACA,SAASC,eAAT;AACA,SAASC,gBAAT;AACA,SAASC,aAAT;;;AAEA,SAASC,cAAT,GAA0B;AACxB,kBAAoCL,QAAQ,CAAC,IAAD,CAA5C;AAAA;AAAA,MAAOM,UAAP;AAAA,MAAmBC,aAAnB;;AACA,MAAMC,WAAW,GAAGV,UAAU,CAACI,eAAD,CAA9B;AAGAH,EAAAA,SAAS,CAAC,YAAM;AACd,aAAeU,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEF,cAAAA,aAAa,CAAC,IAAD,CAAb;AADF;AAAA,+CAEyBH,aAAa,EAFtC;;AAAA;AAEQM,cAAAA,QAFR;AAIEF,cAAAA,WAAW,CAACG,WAAZ,CAAwBD,QAAxB;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMAD,IAAAA,WAAW;AACZ,GARQ,EAQN,EARM,CAAT;AAUA,MAAMG,cAAc,GAAGJ,WAAW,CAACE,QAAZ,CAAqBG,MAArB,CAA4B,UAAAC,OAAO,EAAI;AAC5D,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,YAAY,GAAGd,gBAAgB,CAACY,KAAD,EAAQ,CAAR,CAArC;AAEA,WAAOD,OAAO,CAACI,IAAR,IAAgBD,YAAhB,IAAgCH,OAAO,CAACI,IAAR,IAAgBH,KAAvD;AACD,GALsB,CAAvB;AAOA,SACE,KAAC,cAAD;AACE,IAAA,QAAQ,EAAEH,cADZ;AAEE,IAAA,cAAc,EAAC,aAFjB;AAGE,IAAA,YAAY,EAAC;AAHf,IADF;AAOD;;AAED,eAAeP,cAAf","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\n\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { fetchExpenses } from \"../util/http\";\n\nfunction RecentExpenses() {\n  const [isFetching, setIsFetching] = useState(true);\n  const expensesCtx = useContext(ExpensesContext);\n  // const [fetchedExpenses, setFetchedExpenses] = useState([]);\n\n  useEffect(() => {\n    async function getExpenses() {\n      setIsFetching(true);\n      const expenses = await fetchExpenses();\n      // setFetchedExpenses(expenses);\n      expensesCtx.setExpenses(expenses);\n    }\n    getExpenses();\n  }, []);\n\n  const recentExpenses = expensesCtx.expenses.filter(expense => {\n    const today = new Date();\n    const date7DaysAgo = getDateMinusDays(today, 7);\n\n    return expense.date >= date7DaysAgo && expense.date <= today;\n  });\n\n  return (\n    <ExpensesOutput\n      expenses={recentExpenses}\n      expensesPeriod=\"Last 7 Days\"\n      fallbackText=\"No expenses registered for the last 7 days.\"\n    />\n  );\n}\n\nexport default RecentExpenses;\n"]},"metadata":{},"sourceType":"module"}